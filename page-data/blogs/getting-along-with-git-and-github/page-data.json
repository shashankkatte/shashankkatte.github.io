{"componentChunkName":"component---src-templates-blog-template-js","path":"/blogs/getting-along-with-git-and-github","result":{"data":{"blog":{"content":"# Getting along with Git & Github\n\n## A no non-sense reference for developers by a developer.\n\n![](https://cdn-images-1.medium.com/max/1200/0*xrmPzXcSC3EpavNq)\nPhoto by [Annie\nTheby](https://unsplash.com/@annietheby?utm_source=medium&utm_medium=referral)\non [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)\n\n*Yet another post on git? Don't we already have enough out there?*\n\nThere is no dearth of resources on Git and GitHub. But most of them fall on the two extremes: Either they are too basic that you can’t rely on them for your everyday work or they are too advanced and complex that they scare you away right at the door.\n\nWouldn’t it be wonderful if we had a human-understandable, simple reference that we could use every day? This is not an elaborate guide that explains every single command with every single parameter. It's a reference of a subset of commands, the only ones you’ll need every day at work. Let's jump right in…\n\n### But first, make yourself comfortable with the terminal\n\nGit is a command-line tool, which means it was meant to be used from your terminal/command prompt to unleash its true power. Relax! you only need to know the basics. Here’s a [quick and easy cheat sheet](https://medium.com/codestoryshell-commands-you-should-have-memorized-yesterday-1eef348d7d76sk=e52dbac3b3e1b639170eec42548b499a).\n\n### So then what is git?\n\n> Git is a [free and open source](https://git-scm.com/about/free-and-open-source)\n> distributed version control system designed to handle everything from small to very large projects with speed and efficiency. — git-scm.com\n\nIn simple terms, Git is a tool that tracks and stores changes to your files. It allows you to look at the history of a file for changes and revert it to a state at any point in that history. So if you screw up a file you can go back to when it was good!\n\nIts distributed, which means it allows more than one person to work on a file. Almost every company uses git. Be it software developers tracking their source code or non-technical teams versioning their documents, you’ll find git everywhere. *Just learn it there is no way out!*\n\n> Fun fact : Git was created by Linus Torvalds, the creator of Linux to manage the\n> source code for linux kernel project. The name git means nothing, it was the shortest key combination he could find which was not already a reserved linux command.\n\n### Arent git and GitHub the same?\n\nNo! Git is the actual version control software/tool and Github is a repository hosting service.\n\nHere’s a quick analogy. Imagine if Git were McDonald's burger, then GitHub is a food delivery service like Ubereats. It delivers you the burger but it isn't the burger!\n\nGitHub allows you to store your repository on their servers and access, add changes etc over the internet. Along with this GitHub also provides additional features like automatic deployment of code etc.\n\n### OK, but what is a repository (a.k.a Git Repo)?\n\nWhen you ask git to track changes to a file, It stores all the changes and the history of changes you make to files in a secret hidden folder. This folder is called a git repository and it's managed and updated by git.\n\nWhen you hear — The file is in the git repository. It means that git is tracking all the changes to the file and you can see its history and retrieve it in its latest state or in any state in history.\n\n### What is a commit?\n\nCommit is a snapshot of your file at a given time. When you commit a file to Git the file’s state is captured and saved on the git timeline into the Git repository.\n\n### Do I need to install git?\n\nYes, If isn't already installed. Just follow the instruction at this [link from Github](https://github.com/git-guides/install-git). If you still feel confused just do a search on youtube. You got this!\n\n\n### The basics — foundational commands\n\nThe commands in this section are the ones you’ll use almost every day. Make sure you practice them. Better still…*print this section and stick it on the wall!*\n\n#### How to initialize a git repository?\n\nWhen You initialize a git repo, you are essentially asking git to start tracking files in that folder. You need to initialize a repository before you can do any other git operations.\n\nJust open the terminal and then enter the following command, replace the name of the repo with what you wish to call the repo. As a best practice, the folder name is mostly the same as repo.\n\n    $ git init <name of repo>\n\n> You need to init a repo only once at the beginning\n\nYou can also init an existing folder as a git repo by navigating into the folder and using the following command. `.` is an alias for the current directory.\n\n    $ git init .\n\n#### Let’s understand the Git States\n\nWhen you start tracking files in a folder for a project with Git. It logically divides your project into three areas\n\n1.  **Working directory** — This is the area where you work with your actual files, edit them modify them etc. Think of this as your kitchen where you prepare the food.\n2.  **Staging area** — When you are ready for git to track any file or changes it is first moved into a staging area. This is the last waiting area before the changes are committed into git repo. Think of this as your kitchen island where\nyou place prepared food to be stored in the refrigerator for later. You may choose to add more food or remove it as you please.\n3.  **Repository — **This is the final resting place for your file’s changes and its history. The refrigerator!\n4.  **Remote Repository** — This comes into the picture when you are using GitHub. You are essentially keeping a mirror image of your local repo on GitHub servers and vice-versa. This may be like the refrigerator at your mom’s where even your siblings store their food!\n\n#### Check the current status\n\nBefore adding any changes to the repo it's always good to check what files are added/modified. What files are in the staging area etc. Use the git status command\n\n    $ git status\n\n#### Add selected file to the staging area\n\nTo add a file to be tracked by Git. use the Git add command followed by the file name\n\n    $ git add <file name>\n\nIf you want to add all untracked files to the staging area you can use the following command\n\n    $ git add .\n\n#### Committing changes to git\n\nWhen the file is in the staging area you are ready to commit it into the rep. Always add a descriptive commit message on what changes are being committed.\n\n    $ git commit -m \"Commit message\"\n\nIf you use the commit command without any flags it will open your default texteditor to add descriptive commit messages.\n\n    $ git commit\n\n#### How to see the commit history\n\nUsing git log to shows all the commits that are part of this repository. Press `q` to get out of the log command\n\n    $ git log\n\nYou can see the details of the last commit and also the difference using the git show command\n\n    $ git show\n\n#### List all files git is tracking\n\nIf you want to look at all the files GIt is currently tracking use the git\nls-files command\n\n    $ git ls-files\n\n#### Express commit to already tracked files\n\nYou can use express commit to already tracked and modified files using the `a` and `m` flags together\n\n    $ git commit -am \"commit message\"\n\n**Un-stage changes**\n\nIf you added a file to the staging area by mistake or changed your mind on a modification un-stage it with the following command\n\n    $ git reset HEAD filename.ext\n\n#### Reverting back to the last good commit for a file\n\nThings get messed up quite often, to revert your file to last good state just use\n\n    git checkout -- filename.txt\n\n#### Git help command\n\nAt this point, you might be wondering- what if I need to see other options available for the git command. just use the git help command\n\n    $ git help commandname\n\n#### A better way of seeing commit history\n\nThe git log command by itself may not give you a good picture of the commit history. Using it with other options will give you the better information you need.\n\n    $ git log --oneline --graph --decorate --all\n\n#### Create your own git history command with git Alias\n\nTyping long commands are a pain. So git allows you to create short cut/aliases here’s how you can create one for the log command we just saw.\n\n    $ git config --global alias.hist \"log --oneline --graph --decorate --all\"\n    $ git hist\n\nChecking the history of commits for a particular file with our new alias\n\n    $git hist -- filename.ext\n\n#### Show git global config file\n\nNow you are wondering how do I see all the global configuration settings git. Well just use the config command.\n\n    $git config --global --list\n\n#### Rename, move and delete files\n\nWhen you have a folder tracked by git, always use the git mv command to rename and move files. If you use the file operations provided by the OS, you may lose\nthe file's commit history. If you rename a file using the OS command git sees it as a deleted file and the renamed file is a new file. To avoid this scenario use:\n\n    $git mv filename.ext newfilename.ext\n\nRemoving file through git automatically tracks the deletion\n\n    $git rm filename.ext\n\nof course you have to commit this action as well with git commit\n\n#### Renaming and deleting files outside git using OS commands\n\nin case you commit the cardinal sin you can fix it with, of course, it needs a commit after\n\n    $ git add -A\n\nSee deleted files\n\n    $ git add -u\n\n#### Excluding unwanted files with .gitignore\n\nThere are often times when you don't want to track a file like log files, local config files etc. just create a file named `.gitignore`. Add file/ folder type\nper line to ignore. For example, if you want to ignore all log files you may add an entry as `*.log`\n\nThis brings us to the end of basic git command and operations. Let's look at some advanced concepts that will make your collaboration smoother.\n\n\n### Advanced Git commands\n\nOnce you get a good hold of the basic commands, it's time to move on to these more advanced commands.\n\n#### Checking the difference between two commits\n\nIf you want to look at what changes were made between two commits, you use the diff command\n\n    $ git diff commitid commitid\n\nInstead of commit id, it can be branch names too. To watch the differences in diff tool. A diff tool like P4merge or beyond compare shows you differences between the two files\n\n    $git difftool commitid commitid\n\nif we don't provide the second argument then it automatically compares with HEAD. git help diff to know more\n\n#### Branching and merging\n\nBranching is an essential part of Git, When you want to work on a change on a repository with others you *branch out*, add your changes and then *merge your changes* with the main branch.\n\nThink of it like a library where you borrow books. so when you need a new book you check out a book which is like branching and when you are done you return it back to the library or merge it into the main branch.\n\nBranches are commits on a timeline in git. More accurately branches are labels we give to timelines or commit ranges on git.\n\n#### Types of merge\n\n1.  **fast forward merge**: when no changes are done on the main branch\n1.  **Automatic merge**: git resolves automatic merges\n1.  **Manual merge**: When git cant resolve conflicts, it asks you to merge manually\n\n#### Special markers\n\nHEAD is a special marker in git which normally is the last commit of the current branch\n\n#### Simple branching\n\nTo check current branches in a repo you use:\n\n    $ git branch\n\nCreate and switch to branch at the same time\n\n    $git checkout -b branchname\n\nNote that if there were uncommitted changes to the main branch it's carried over to the new branch.\n\n#### Merging: Integrating changes from any branch to the main branch\n\nFirst, we need to switch to the main branch, or the branch we want to merge into.\n\n    $ git checkout branchname\n\nAnd then we merge by pulling changes from the new branch to our branch\n\n    $git merge newbranch\n\nOnce you are done the merged branch is of no use so clean it up. this command delete unwanted branches\n\n    $ git branch -d nameofbranch\n\n#### Marking special events with tagging\n\nYou can add tags to your commits for any special event like release or fixes. Tags are just labels that you can put at arbitrary commit points. There are 2 types of tags\n\n1.  Lightweight tags — juts tag name\n1.  Annotated tags — have extra information\n\n    $ git tag tagname\n\nto see all tags, use\n\n    $ git tag --list\n\nTo delete a tag\n\n    $ git tag -d tagname\n\n**The annotated tag**, lets you associate a commit message when you create a tag\n\n    $ git tag -a tagname -m \"commit message\"\n\nTo see details of an annotated tag use the git show command\n\n    $ git show tagname\n\nWhen you create tag, the tag associates itself with the last / latest commit. Tags are meant to be immutable so if you do need to add a change to a commit create a new tag say v.1.1.\n\n#### Saving your unfinished work\n\nYou can context switch in between your work without losing any uncommitted work\n\n    $ git stash\n\nThis is saved in a work in progress or WIP. To see the stashes you use\n\n    $ git stash list\n\nTo get back where you left off\n\n    $ git stash pop\n\n#### Time travel with reset and reflog\n\nTo reset to a commit point you can use the following command. It's called a soft reset. Soft reset just changes where HEAD is pointing, preserves our staging area and working directory\n\n    $ git reset a816c62 --soft\n\nThere is also a mixed reset\n\n    $ git reset d4a3d08 --mixed\n\nIf you want to unstage and put everything in the working directory we use a hard reset\n\n    $ git reset d4a3d08 --hard\n\nGit reflog shows all the different actions we have taken\n\n    $ git reflog\n\n*****\n\n### Working with Github\n\nThese are just the essential commands you need to work with GitHub\n\n#### Adding an existing local repo to GitHub.\n\nThe git remote command manages all remote connections from local to the remote repository\n\nTo check if your local repo already has any remote connections use the remote command with `-v` flag\n\n    $git remote -v\n\nIf it returns nothing then you know that there are no associated remote\nconnections.\n\n    $ git remote add origin git@github.com:gitusername/reponame.git\n\n### Pushing changes to GitHub\n\nFor the first push to GitHub, the following command pushes all changes to the main branch along with the tags and establishes a tracking relationship between your local repository and the GitHub repo.\n\n    $ git push -u origin main --tags\n\n#### Cloning a git repo\n\nCloning is like creating a local copy of the GitHub repository\n\n    $ git clone \n     url\n\nprovide an explicit folder name at the end if you want to clone into a diff folder name other than the remote repo.\n\n#### Pushing back changes to Github\n\n    $ git push origin main\n\nhere origin and main are optional, git hub will automatically figure out that you are using into the current branch.\n\n#### Fetch and pull\n\nFetch and pull lets you bring in any changes in the GitHub repo to your local repo. Fetch just brings the new changes from remote repo but doesn't merge any conflicts\n\n    $ git fetch\n\nGit pull is two commands in one it fetches and merges on one go\n\n    $ git pull\n\n#### Updating reference to the origin\n\nIf you need to re-assign the URL for GitHub repository use the command\n\n    $ git remote set-url origin newrepourl\n\n#### Show the details on remote\n\nThis shows the details of the current remote URLs\n\n    $ git remote show origin\n\n#### Pushing local branches to Github\n\n    $ git push -u origin branchname \n\n#### Prune dead branches\n\n    $ git fetch -p\n\n*****\n\n### Conclusion\n\nWorking with Git is an essential skill and it's not all that hard to master. It just takes a little practice and these commands become your muscle memory.\n\nThank you for reading and Happy Hacking!\n","title":"Getting along with Git & Github","desc":"A no non-sense git reference for developers by a developer."}},"pageContext":{"slug":"getting-along-with-git-and-github"}},"staticQueryHashes":["2337742411"]}