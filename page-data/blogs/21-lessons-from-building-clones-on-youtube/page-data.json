{"componentChunkName":"component---src-templates-blog-template-js","path":"/blogs/21-lessons-from-building-clones-on-youtube","result":{"data":{"blog":{"content":"# 21 Lessons from Building Clones On youtube\n\n## How to solidify your learning and grow as a software developer\n\n![](https://cdn-images-1.medium.com/max/1200/0*Cp6oHHd71QRHK_7C)\nPhoto by [Annie\nSpratt](https://unsplash.com/@anniespratt?utm_source=medium&utm_medium=referral)\non [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)\n\nI have been crafting software and mentoring for over a decade. I can vouch that\nthere hasn’t been a better time than today to learn to code. Free and quality\ntutorials on youtube have made it easier than ever.\n\nWhile it’s exciting to follow along with a youtube video and create Netflix or\nAmazon App clones. These videos crunch mountains of new concepts, techniques and\nideas, making them challenging and often overwhelming to digest. And… easier to\nforget!\n\nSo then… How do you retain all that new knowledge and make that learning\npermanent? How do you even get to finishing that App build? Here are some\ntactics I have shared with my mentees and teammates from my own learning\nexperience.\n\n### 1 . The Actual build will take way longer than the video length\n\nBe mentally prepared to spend more time than the video duration. When you start\ncoding along with a video, it takes time to watch what the instructor is doing\nand then type that code into your own text editor. This context switching does\ntake more time. Of course, you’ll encounter bugs.\n\nMore often this added time can feel like an eternity and demotivating.\nAcknowledging and setting enough buffer time before you start will increase your\nchances of completing the build.\n\n### 2. Learn the Basics first\n\nSpend a couple of hours to brush up on the basics of the programming language\nyou’d be using. For example, if it’s a React or Angular App, make sure you\nfamiliarize yourself with the [concepts of Modern\nJavascript](https://medium.com/codestory/7-js-concepts-to-master-a71f33d676f3?source=friends_link&sk=d1167b474cd431a75a35ca6d7f1e6d10)\nbefore jumping into that App build.\n\nSure you can learn as you go, but most instructors will be focusing more on\nbuilding the app than explaining programing language syntax. Having prior\nacquaintance with language syntax will avoid you being stumped in the middle of\nan interesting build.\n\n### 3. Befriend the terminal and Git now\n\nI know what you are thinking. Why would you need to know the terminal and Git\nwhile you are just coding locally on your own computer? Well… first for most of\nthe frameworks and libraries come with a CLI and you will have to jump in the\nterminal more often than not.\n\nsecondly, Git is an essential part of the development process at every company.\nThe earlier you get comfortable using it the better. Building good coding habits\nright at the beginning will make you a better developer. Also, you can showcase\nyour build on GitHub, won’t that be cool?\n\nHere’s a quick cheatsheet on\n[Terminal](https://medium.com/codestory/shell-commands-you-should-have-memorized-yesterday-1eef348d7d76?source=friends_link&sk=e52dbac3b3e1b639170eec42548b499a)\nand\n[Git](https://medium.com/katte-io/getting-along-with-git-github-e1fb7e25d059).\n\n### 4. Slow it down and speed it up at will\n\nYoutube video tutorials are heavily edited to keep the viewers interested. This\nresults in some videos being too rushed, while others have a lot of marketing\ncontent in between. you might not be able to follow mouse clicks or you might\nmiss out on what the instructor is saying or just doze off during marketing\nchatter.\n\n![](https://cdn-images-1.medium.com/max/800/0*JdTJq15HLMy62tEa.png)\nScreenshot of Youtube player settings by author\n\nUse the youtube player’s playback speed to slow the video down or speed it up\nwhen you need it. This is literally learning at your own pace.\n\n### 5. Understand the problem you are solving\n\nAlways ask yourself what problem is this App solving? how is this App making the\nuser’s life better or easier? Once you understand the Why, you will be able to\ncomprehend the reason behind the certain way things are done.\n\nJust punching in code as-is from the video will not make you a better developer.\nWhen you build an app, you don’t build it to show how powerful a framework is\nbut rather to solve a user’s problem.\n\n*The users, in the end, don’t care which framework or language you used!*\n\n### 6. Frameworks change but Patterns stay\n\nToday you might be building a Tinder clone with Angular using the MVC pattern.\nWhile you might focus on the intricacies of using the Angular framework, don’t\nforget to understand the MVC (Model view controller) pattern itself. Tomorrow\nyou might be working with ASP.net or some other framework but the underlying MVC\npattern will remain.\n\n### 7. Learn the parts to master the whole\n\nSo you are building the checkout component of the Amazon App, you successfully\nshow the list of countries and states you cheer and move on to the next part.\nTake a Pause and think back! Where else have you seen such a list? almost every\nother App! Understand and practice these smaller concepts like calling an API\nand binding the response to a list.\n\nHere’s are a [bunch of public\nAPI’s](https://devresourc.es/tools-and-utilities/public-apis) that you can use\nto practice\n\n### 8. Third-party libraries are frustrating and you’re not alone\n\nIn the world of software, not every library comes with a proper manual. You’ll\nsometimes find that what works on the video might not work on your computer.\nThis is a normal day in every developer’s life.\n\nTry to find if the instructor has shared the source code and try to use the same\nconfig or package.json files. If that doesn’t work do a quick google search of\nthe error message and should be able to find answers.\n\n### 9. Learn to Implement Tests\n\nOne of the first things you will see in tutorials is — **let’s clean up the\nstarter App**. You are made to delete every file including unit test files.\n\nOnline tutorials often skip on the importance of creating tests so that they can\nfinish the build within the time frame.\n\nWrite your own tests, watch other videos on how to test your code and implement\nit.\n\n### 10. Heroku isn’t the only place to deploy\n\nMost of the tutorial videos show the easiest way to deploying your Apps. This is\ngood but don’t stop there. Look around to see what companies use and how they\ndeploy their Apps serving millions of users.\n\nExplore Amazon Web Services (AWS), Microsoft Azure and Google cloud platform\netc. You’ll come across many companies using different cloud providers. It helps\nto be familiar with deploying to various platforms.\n\nPractice deploying the App to different hosting platforms.\n\n### 11. Customize and make it better\n\nAlways ask yourself — How can I make this App better? Will that change, help the\nuser? or will it make it harder? Even if you don’t know how to implement your\nideas right now. Jot them down, brainstorm with your friend. Share your ideas on\nforums like Dev.to or Stack overflow and the community will be more than happy\nto guide you on implementation.\n\nSoftware developers are always striving to provide better solutions and making\nuser’s life easier. You are becoming a better developer when you get into that\nmindset.\n\n### 12. The project structure shown might not be production-ready\n\nWith youtube videos, the instructor’s aim will be to explain to you the main\nconcepts in the shortest possible time and not put you to sleep. So you might\nsee sometimes that they do not bother about structuring their files and folders,\nor naming conventions unless the framework dictates.\n\nDon’t assume that these as the best practices, companies building production\nsoftware follow a set of practices and conventions that make it easier to\nmaintain and collaborate. Learn these best practices, naming conventions and\nimbibe them while you practice to code from day one.\n\n### 14. The App isn’t production-ready either\n\nBe aware that in a real-world scenario if you are building Amazon, Netflix or\nTinder, You will be not be deploying the App as is.\n\nThe App needs to be optimized for the best performance in production\nenvironments. Learn about performance tuning, SEO etc.\n\nYou will also be ideally able to track and log your Apps performance with\nAnalytics. Explore internationalization (**I18n**) which allows you to serve\nyour app in regional languages.\n\n### 13. It is OK to ask for help and even better to help others!\n\nWe, software developers, thrive by helping each other. Whenever you get stuck or\nhave a question don’t be afraid to reach out to the community. Stack Overflow\nand dev.to has some of the most helpful people. Be sure to search the web for\nanswers. Trying to find answers on your own by googling is a skill in itself.\nAlso, try and answer questions by others about what you already know.\n\nJoin meetup groups in your area and make friends with other developers. Software\ndevelopers are always learning and building new things. This is one sure way to\ngrow your skills and your career.\n\n### 14. Keep a Dev Journal\n\nI know “Dear Diary…” sounds cheesy but hear me out. Documenting your journey and\nwhat you have learned is of utmost importance.\n\nBeing able to look back at your journey of all the things you have learned, the\nconcepts you have covered is priceless! You don’t need a fancy leather-bound for\nthis! It can be as simple as a text file or a Github repo with a Readme file.\nTry it and you’ll thank me later.\n\n### 15. Likewise… keep a bug Journal\n\nIt’s amazing how many bugs and errors we encounter every day as developers. It’s\nalso fascinating that most of the bugs fall under a few already known\ncategories.\n\nWhile you are building that App clone, record every bug you encounter. You’ll\nsoon realize that many commons bugs are null reference exceptions, type errors,\ndata initialization goof-ups etc.\n\nThe more you debug the better you’ll get at identifying and fixing them.\nRecoding how you fixed them shaves you that extra time and energy.\n\n### 16. Gist those code snippets\n\nWhen you start building more and more Apps from youtube, you’ll start realizing\nthat many code snippets are common. For example, creating a functional component\nin React. Or Calling an API with Fetch. Or that sneaky code to get the user’s\ngeolocation. Just\n[Gist](https://docs.github.com/en/github/writing-on-github/creating-gists) it.\n\nDevelopers don’t remember everything, we are problem solvers and not memory\ndevices. Gists and code snippets serve as your own personal toolbox, whenever\nyou need them you look them up in your gist and use them.\n\n### 17. Where you learn matters too\n\nGet comfortable, if you are lucky to have a bigger extra screen use it. If you\ncan cast the video to your big screen TV do it. Sit on your most favourite\nchair, play that Lo-Fi tune in the background. Turn on that fan if it’s too hot.\nShut the door and forget your phone.\n\nHaving a conducive learning environment will keep you motivated and less tired.\n\n### 18. Go easy on coffee and chips\n\nI know this is controversial, we developers literally run the world coffee and\nchips economy. But go easy on caffeine and crunch. Drink water. Take breaks,\nshake a leg and stretch. Play a game, drop and do 10 push-ups and get back to\ncode.\n\nStaying active and eating clean helps you learn better and retain for longer.\n\n### 19. Teach what you learn\n\nBlog it. Make a Youtube video. Tweet it or whisper into your dog’s ears!\nWhatever it takes, share what you learn. Recalling and explaining the concepts\nyou have learned is one of the most effective ways to solidify your learning.\n\n### 21. Respect the creators\n\nFinally, respect and thank the content creators. Creating and editing youtube\nvideos and online tutorials take a lot of effort and time. Most of the creators\nare doing this out of passion and for livelihood. It takes years of experience\nand expertise to be able to distill the concepts in a simple hour-long youtube\nvideo or a 5-minute blog post.\n\nReach out to the creators and follow them on social media. Most of them will be\nhappy to respond to you. A simple thank or thumbs up goes a long way.\n\n### Conclusion\n\nWe are living in very fortunate times with abundant free learning resources. It\ncan and will get overwhelming at times. Making the most of them takes strategy\nand focus. Cut the clutter dig deeper to learn better.\n\nThank you for your time. I appreciate you reading this post! I’m eager to hear\nabout your learning journey. Happy Hacking!\n","title":"21 Lessons from Building Clones On youtube","desc":"Online learning resources are great to learn any new skill especially coding, but how do you wade through the mountains of tutorials and retain what you learn? here's how..."}},"pageContext":{"slug":"21-lessons-from-building-clones-on-youtube"}},"staticQueryHashes":["2337742411"]}